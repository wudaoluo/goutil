### 结合自己的想法和viper 所以命名上参考viper

### 实现
 * 开启远程同步，修改本地不生效
 * 开启远程同步，每次启动都下来一次配置文件到本地
 * 开启远程同步，修改远程，本地也要同步，对于一些特殊值，比如连接池等要注意
 * 开启远程同步


 * 不开启远程同步，监听本地配置修改，自动生效
 * 不开启远程同步，


 * 核心功能（没有远程配置的版本）
   1. 读取配置文件  ，要考虑配置优先级
   2. 监听配置，变化实时更新
   3. 单例模式？


### 配置文件的优先级
    flag > 远程 > 本地 > 默认



### 考虑到的问题
 * 一个程序有多个配置文件 - 怎么办
 * 为什么key都要转换成小写(我没有转换) 只有配置文件的类型转换成小写了




### 设置默认值

viper.SetDefault("ContentDir", "content")
viper.SetDefault("LayoutDir", "layouts")
viper.SetDefault("Taxonomies", map[string]string{"tag": "tags", "category": "categories"})


### 读取配置文件
viper.SetConfigName("config") // name of config file (without extension)
viper.AddConfigPath("/etc/appname/")   // path to look for the config file in
viper.AddConfigPath("$HOME/.appname")  // call multiple times to add many search paths
viper.AddConfigPath(".")               // optionally look for config in the working directory
err := viper.ReadInConfig() // Find and read the config file
if err != nil { // Handle errors reading the config file
	panic(fmt.Errorf("Fatal error config file: %s \n", err))
}


###读取远程配置文件
viper.AddRemoteProvider("etcd", "http://127.0.0.1:4001","/config/hugo.json")
viper.SetConfigType("json") // because there is no file extension in a stream of bytes, supported extensions are "json", "toml", "yaml", "yml", "properties", "props", "prop"
err := viper.ReadRemoteConfig()
